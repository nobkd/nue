
<script>
  import { router } from '/@nue/app-router.js'
  import { model } from '/model/index.js'
</script>

<!-- custom attribute needed for HMR -->
<main @name="app" class="app" custom="app">

  <aside>
    <nav role="navigation">
      <a data-accesskey="0" href="/">Everything</a>
      <hr>
      <a data-accesskey="1" href="/question">Questions</a>
      <a data-accesskey="2" href="/demo_request">Demo requests</a>
      <a data-accesskey="3" href="/problem">Problems</a>
      <a data-accesskey="4" href="/feedback">Feedback</a>
    </nav>
  </aside>

  <article class="content">
    <header class="flex">
      <input @input="search" data-accesskey="/" :value="query"
        type="search" placeholder="Search contacts">
      <nav>
         <span>{ statusText() }</span>
         <button @click="seek(-1)" data-accesskey="h"
            :disabled="!coll?.start">Prev</button>

         <button @click="seek(1)" data-accesskey="l"
            :disabled="coll?.start + coll?.length > coll?.total">Next</button>
      </nav>
    </header>
    <section id="main-wrap"/>
  </article>

  <article class="context">
    <section id="context-wrap"/>
  </article>


  <script>
    mounted() {
      router.on('type start query', params => {
        this.coll = model.filter(params)
        this.mountChild('contacts', window['main-wrap'], { state: router.state, ...this.coll })
        this.query = params.query
        this.update()
      })

      // item selected
      router.on('id', ({ id }) => {
        const el = id && model.get(id)
        if (el?.data) this.mountChild('contact', window['context-wrap'], el.data)
      })

      router.start({ root: this.root })
    }

    search(e) {
      router.set({ type: 'search', query: e.target.value, start: null })
    }

    statusText() {
      const { start, length, total } = this.coll || {}
      return `${ start + 1 } â€“ ${ start + length } of ${ total }`
    }

    seek(to) {
      const { start, length } = this.coll
      router.set({ start: start + to*length })
    }
  </script>

</main>


<div @name="app-loader">
  <h3>Loading...</h3>

  <script>
    async mounted() {
      await model.init()
      router.setup('/:type', ['query', 'id', 'start'])
      const wrap = this.root.closest('main')
      this.mountChild('app', wrap)
    }
  </script>
</div>

