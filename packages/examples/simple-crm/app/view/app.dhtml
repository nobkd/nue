
<script>
  import { router } from '/@nue/app-router.js'
  import { model } from '/model/index.js'
</script>

<!-- custom attribute needed for HMR -->
<div @name="app" class="app" custom="app">

  <aside class="navigation">
    <header>
      <h1>Acme Inc</h1>
    </header>

    <navigation/>
  </aside>

  <main>
    <header class="flex">
      <label class="search">
        <img src="/icon/search.svg" data-accesskey="/" title="Search contacts">
        <input @input="search" :value="query" type="search" placeholder="Search contacts">
        <kbd>/</kbd>
      </label>

      <div>
         <span>{ statusText() }</span>
         <button @click="seek(-1)" data-accesskey="h"
            :disabled="!coll?.start">Prev</button>

         <button @click="seek(1)" data-accesskey="l"
            :disabled="coll?.start + coll?.length >= coll?.total">Next</button>
      </div>
    </header>

    <section id="main-wrap"/>
  </main>

  <aside :hidden="!item" class="details">
    <header class="flex">
      <h2>Contact</h2>
      <div>
        <button data-accesskey="?" popovertarget="help">Help</button>
        <button @click="router.del('id')">×</button>
      </div>
    </header>

    <section id="context-wrap"/>
  </aside>


  <script>
    router = router

    mounted() {

      router.on('type query filter start sort asc', args => {
        const data = this.coll = model.filter(args)
        this.mountChild('contacts', window['main-wrap'], data)
        this.query = args.query
        this.update()
      })

      // item selected
      router.on('id', ({ id }) => {
        const data = this.item = id && model.get(id)
        if (data) this.mountChild('contact', window['context-wrap'], data)
        this.update()
      })

      router.start({ root: this.root })
    }

    search(e) {
      router.set({ type: 'search', query: e.target.value, start: null })
    }

    seek(to) {
      const { start, length } = this.coll
      router.set({ start: start + to*length })
    }

    statusText() {
      const { start, length, total } = this.coll || {}
      return `${ start + 1 } – ${ start + length } of ${ total }`
    }

  </script>

</div>




<div @name="app-loader">
  <h3>Loading...</h3>

  <script>
    async mounted() {
      await model.init()
      router.setup('/:type/:filter', ['query', 'id', 'start', 'sort', 'asc'])
      const wrap = this.root.closest('main')
      this.mountChild('app', wrap)
    }
  </script>
</div>
